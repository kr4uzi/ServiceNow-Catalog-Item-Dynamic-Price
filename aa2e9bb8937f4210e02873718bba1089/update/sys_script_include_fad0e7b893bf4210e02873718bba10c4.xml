<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_scp_price.Util</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Enables basic functionality for </description>
        <name>Util</name>
        <script><![CDATA[/* global Class, GlideScopedEvaluator, global, gs, sn_currency */
/* eslint no-undef: "error" */
var Util = Class.create();
Util.prototype = {
	initialize: function (priceCalculator, arguments) {
		this.priceCalculator = priceCalculator;
		this.cartItemGr = arguments[0];
	},

	calcPrice: function () {
		const priceCalculator = this.priceCalculator;
		let scriptEnabledField = '';
		let scriptField = '';
		if (priceCalculator instanceof global.CatalogPriceCalculator) {
			scriptEnabledField = 'x_376096_scp_price_use_script';
			scriptField = 'x_376096_scp_price_script';
		} else if (priceCalculator instanceof global.CatalogRecurringPriceCalculator) {
			scriptEnabledField = 'x_376096_scp_price_use_recurring_script';
			scriptField = 'x_376096_scp_price_recurring_script';
		}

		const defaultPrice = priceCalculator.cpc.calcPrice();
		if (scriptEnabledField && scriptField) {
			const catItemGr = this.cartItemGr.cat_item.getRefRecord();
			if (catItemGr[scriptEnabledField]) {
				const gse = new GlideScopedEvaluator();
				gse.putVariable('cartItemGr', this.cartItemGr);

				const currentCurrency = catItemGr.price.getSessionCurrencyCode();
				gse.putVariable('priceConvert', function (currency, amount) {
					const conv = new sn_currency.GlideCurrencyConverter(
						currency,
						currentCurrency
					);

					conv.setAmount(amount);
					const convertedPrice = conv.convert();
					if (convertedPrice) {
						return parseFloat(convertedPrice.getAmount());
					}

					return null;
				});

				const res = gse.evaluateScript(catItemGr, scriptField, {
					defaultPrice: defaultPrice
				});

				if (res == null || isNaN(res) || typeof res != 'number') {
					const errorMessage = `Calculation Script '${catItemGr.getElement(scriptField).getLabel()}' of Catalog Item '${catItemGr.getDisplayValue()}' failed. Return value: ${res}`;
					gs.error(errorMessage);

					if (gs.hasRole('admin')) {
						gs.addErrorMessage(errorMessage);
					}
				}
				
				return res;
			}
		}
		
		return defaultPrice;
	},

	type: 'Util'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-01 14:59:36</sys_created_on>
        <sys_id>fad0e7b893bf4210e02873718bba10c4</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>Util</sys_name>
        <sys_package display_value="Service Catalog+ Dynamic Price" source="x_376096_scp_price">aa2e9bb8937f4210e02873718bba1089</sys_package>
        <sys_policy/>
        <sys_scope display_value="Service Catalog+ Dynamic Price">aa2e9bb8937f4210e02873718bba1089</sys_scope>
        <sys_update_name>sys_script_include_fad0e7b893bf4210e02873718bba10c4</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-08-01 18:56:02</sys_updated_on>
    </sys_script_include>
</record_update>
